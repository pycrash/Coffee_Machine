type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        static int water = 400, milk = 540, coffee = 120, money = 550, cups = 9;
        Scanner scanner = new Scanner(System.in);
        public static void main(String[] args) {
            menu();
        }

        private static void menu() {
            System.out.println("Write action (buy, fill, take, remaining, exit): ");
            Scanner scanner = new Scanner(System.in);
            String operation = scanner.next();
            System.out.println();

            switch (operation) {
                case "buy":
                    buy();
                    break;
                case "fill":
                    fill();
                    break;
                case "take":
                    take();
                    break;
                case "remaining":
                    machineState();
                    break;
                case "exit":
                    System.exit(1);
                    break;
                default:
                    //do nothing
            }
        }

        private static void take() {
            System.out.println("I gave you $" + money);
            money = 0;
            System.out.println();
            menu();
        }
        private static void fill() {
            System.out.println("Write how many ml of water do you want to add:");
            Scanner scanner = new Scanner(System.in);
            water = water + scanner.nextInt();
            System.out.println("Write how many ml of milk do you want to add: ");
            milk = milk + scanner.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add: ");
            coffee = coffee + scanner.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            cups = cups + scanner.nextInt();
            System.out.println();
            menu();

        }
        private static void buy() {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ");
            Scanner scanner = new Scanner(System.in);
            String choice = scanner.next();
            boolean hasWater, hasMilk, hasCoffee, hasCups;


            switch (choice) {
                case "1":
                    if (water >= 250 && coffee >= 16 && cups >= 1) {
                        water = water - 250;
                        coffee = coffee - 16;
                        cups = cups - 1;
                        money = money + 4;
                        System.out.println("I have enough resources, making you a coffee!");
                        break;
                    } else {
                        hasWater = water >= 250;
                        hasMilk = true;
                        hasCoffee = coffee >= 16;
                        hasCups = cups >= 1;
                        notEnoughResources(hasWater, hasMilk, hasCoffee, hasCups);
                        break;

                    }

                case "2":
                    if (water >= 350 && milk >= 75 && coffee >= 20 && cups >= 1) {
                        water = water - 350;
                        milk = milk - 75;
                        coffee = coffee - 20;
                        cups = cups - 1;
                        money = money + 7;
                        System.out.println("I have enough resources, making you a coffee!");
                        break;
                    } else {
                        hasWater = water >= 350;
                        hasMilk = milk >= 75;
                        hasCoffee = coffee >= 20;
                        hasCups = cups >= 1;
                        notEnoughResources(hasWater, hasMilk, hasCoffee, hasCups);
                        break;
                    }
                case "3":
                    if (water > 250 && coffee > 16) {
                        water = water - 200;
                        milk = milk - 100;
                        coffee = coffee - 12;
                        cups = cups - 1;
                        money = money + 6;
                        System.out.println("I have enough resources, making you a coffee!");
                        break;
                    } else {
                        hasWater = water >= 200;
                        hasMilk = milk >= 100;
                        hasCoffee = coffee >= 12;
                        hasCups = cups >= 1;
                        notEnoughResources(hasWater, hasMilk, hasCoffee, hasCups);
                        break;
                    }
                case "back":
                    menu();
                    break;
                default:
                    //do nothing
            }
            System.out.println();
            menu();
        }
        private static void notEnoughResources(boolean hasWater, boolean hasMilk, boolean hasCoffee, boolean hasCups) {
            if (!hasWater && hasMilk && hasCoffee && hasCups) {
                System.out.println("Sorry, not enough water!");
            } else if(hasWater && !hasMilk && hasCoffee && hasCups) {
                System.out.println("Sorry, not enough milk!");
            } else if(hasWater && hasMilk && !hasCoffee && hasCups) {
                System.out.println("Sorry, not enough coffee!");
            } else if (hasWater && hasMilk && hasCoffee && !hasCups) {
                System.out.println("Sorry, not enough cups!");
            } else {
                //do nothing

            }
        }


        private static void machineState() {
            System.out.println("The coffee machine has:\n" +
                    water + " of water\n" +
                    milk + " of milk\n" +
                    coffee + " of coffee beans\n" +
                    cups + " of disposable cups\n" +
                    money + " of money");
            System.out.println();
            menu();
        }

        private static void coffeeRequires() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many ml of water the coffee machine has:");
            double water = scanner.nextInt();
            System.out.println("Write how many ml of milk the coffee machine has:");
            double milk = scanner.nextInt();
            System.out.println("Write how many grams of coffee beans the coffee machine has: ");
            double coffee = scanner.nextInt();
            System.out.println("Write how many cups of coffee you will need:");
            double cups = scanner.nextInt();
            int count;


            if(cups * 200 < water && cups * 50 < milk && cups * 15 < coffee) {
                water = (water - cups * 200) / 200;
                milk = (milk - cups * 50) / 50;
                coffee = (coffee - cups * 15) / 15;
                count = min(water, milk, coffee);
                if (count >= 0) {
                    System.out.println("Yes, I can make that amount of coffee (and even " + (int) count +" more than that)");
                } else {
                    System.out.println("Yes, I can make that amount of coffee");
                }
            }
            else {
                water = water / 200;
                milk = milk / 50;
                coffee = coffee / 15;
                count = min(water, milk, coffee);
                System.out.println("No, I can make only " + (int) count +" cup(s) of coffee");
            }

        }

        private static int min(double water, double milk, double coffee) {
            return (int) Math.min(Math.min(water, milk), coffee);
        }

        private static void greet() {
            System.out.println("Starting to make a coffee\n" +
                    "Grinding coffee beans\n" +
                    "Boiling water\n" +
                    "Mixing boiled water with crushed coffee beans\n" +
                    "Pouring coffee into the cup\n" +
                    "Pouring some milk into the cup\n" +
                    "Coffee is ready!");
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: 6
