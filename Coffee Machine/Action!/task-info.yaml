type: edu
custom_name: stage4
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        String string;
        TestClue(String s) {
            string = s;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue("take\n"))
                    .setInput("take\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n1\n"))
                    .setInput("buy\n1\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n2\n"))
                    .setInput("buy\n2\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n3\n"))
                    .setInput("buy\n3\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("fill\n2001\n510\n101\n21\n"))
                    .setInput("fill\n2001\n510\n101\n21\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            String[] clueLines = clue.string.trim().split("\\n");
            String action = clueLines[0].trim();

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0].replace("$", "");
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }


            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            if (water0 != 400 || milk0 != 540 || beans0 != 120
                || cups0 != 9 || money0 != 550) {
                return new CheckResult(false,
                    "Initial setup is wrong: " +
                        "coffee machine should fe filled like " +
                        "stated in the description");
            }

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            if (action.equals("take")) {

                if (diffMilk != 0) {
                    return new CheckResult(false,
                        "After \"take\" action milk " +
                            "amount shouldn't be changed");
                }

                if (diffWater != 0) {
                    return new CheckResult(false,
                        "After \"take\" action water " +
                            "amount shouldn't be changed");
                }

                if (diffBeans != 0) {
                    return new CheckResult(false,
                        "After \"take\" action beans " +
                            "amount shouldn't be changed");
                }

                if (diffCups != 0) {
                    return new CheckResult(false,
                        "After \"take\" action cups " +
                            "amount shouldn't be changed");
                }

                if (money1 != 0) {
                    return new CheckResult(false,
                        "After \"take\" action money " +
                            "amount should be zero");
                }

                return CheckResult.correct();
            }

            else if (action.equals("buy")) {

                String option = clueLines[1].trim();

                if (option.equals("1")) {

                    if (diffWater != -250) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "water amount should be lowered by 250");
                    }

                    if (diffMilk != 0) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "milk amount should not be changed");
                    }

                    if (diffBeans != -16) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "beans amount should be lowered by 16");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 4) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "money amount should be increased by 4");
                    }

                    return CheckResult.correct();

                }

                else if (option.equals("2")) {

                    if (diffWater != -350) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -75) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -20) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 7) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }

                else if (option.equals("3")) {

                    if (diffWater != -200) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -100) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -12) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 6) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }
            }

            else if (action.equals("fill")) {

                int water_ = Integer.parseInt(clueLines[1]);
                int milk_ = Integer.parseInt(clueLines[2]);
                int beans_ = Integer.parseInt(clueLines[3]);
                int cups_ = Integer.parseInt(clueLines[4]);

                if (diffMoney != 0) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "money amount should not be changed");
                }

                if (diffWater != water_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "water amount expected to be increased by " + water_ +
                            " but was increased by " + diffWater);
                }

                if (diffMilk != milk_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "milk amount expected to be increased by " + milk_ +
                            " but was increased by " + diffMilk);
                }

                if (diffBeans != beans_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "beans amount expected to be increased by " + beans_ +
                            " but was increased by " + diffBeans);
                }

                if (diffCups != cups_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "cups amount expected to be increased by " + cups_ +
                            " but was increased by " + diffCups);
                }


                return CheckResult.correct();

            }

            throw new RuntimeException("Can't check the answer");
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        static int water = 400, milk = 540, coffee = 120, money = 550, cups = 9;
        Scanner scanner = new Scanner(System.in);
        public static void main(String[] args) {
            machineState();
            menu();
        }

        private static void menu() {
            System.out.println("Write action (buy, fill, take): ");
            Scanner scanner = new Scanner(System.in);
            String operation = scanner.next();

            switch (operation) {
                case "buy":
                    buy();
                    break;
                case "fill":
                    fill();
                    break;
                case "take":
                    take();
                    break;
            }
        }

        private static void take() {
            System.out.println("I gave you $" + money);
            money = 0;
            System.out.println();
            machineState();
        }
        private static void fill() {
            System.out.println("Write how many ml of water do you want to add:");
            Scanner scanner = new Scanner(System.in);
            water = water + scanner.nextInt();
            System.out.println("Write how many ml of milk do you want to add: ");
            milk = milk + scanner.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add: ");
            coffee = coffee + scanner.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            cups = cups + scanner.nextInt();
            System.out.println();
            machineState();

        }
        private static void buy() {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ");
            Scanner scanner = new Scanner(System.in);
            int choice = scanner.nextInt();
            System.out.println();
            switch (choice) {
                case 1:
                    water = water - 250;
                    coffee = coffee - 16;
                    cups = cups - 1;
                    money = money + 4;
                    machineState();
                    break;
                case 2:
                    water = water - 350;
                    milk = milk - 75;
                    coffee = coffee - 20;
                    cups = cups - 1;
                    money = money + 7;
                    machineState();
                    break;
                case 3:
                    water = water - 200;
                    milk = milk - 100;
                    coffee = coffee - 12;
                    cups = cups - 1;
                    money = money + 6;
                    machineState();
                    break;
                default:
                    System.out.println("Error!");
                    //do nothing
            }
        }

        private static void machineState() {
            System.out.println("The coffee machine has:\n" +
                    water + " of water\n" +
                    milk + " of milk\n" +
                    coffee + " of coffee beans\n" +
                    cups + " of disposable cups\n" +
                    money + " of money");
            System.out.println();
        }

        private static void coffeeRequires() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many ml of water the coffee machine has:");
            double water = scanner.nextInt();
            System.out.println("Write how many ml of milk the coffee machine has:");
            double milk = scanner.nextInt();
            System.out.println("Write how many grams of coffee beans the coffee machine has: ");
            double coffee = scanner.nextInt();
            System.out.println("Write how many cups of coffee you will need:");
            double cups = scanner.nextInt();
            int count;


            if(cups * 200 < water && cups * 50 < milk && cups * 15 < coffee) {
                water = (water - cups * 200) / 200;
                milk = (milk - cups * 50) / 50;
                coffee = (coffee - cups * 15) / 15;
                count = min(water, milk, coffee);
                if (count >= 0) {
                    System.out.println("Yes, I can make that amount of coffee (and even " + (int) count +" more than that)");
                } else {
                    System.out.println("Yes, I can make that amount of coffee");
                }
            }
            else {
                water = water / 200;
                milk = milk / 50;
                coffee = coffee / 15;
                count = min(water, milk, coffee);
                System.out.println("No, I can make only " + (int) count +" cup(s) of coffee");
            }

        }

        private static int min(double water, double milk, double coffee) {
            return (int) Math.min(Math.min(water, milk), coffee);
        }

        private static void greet() {
            System.out.println("Starting to make a coffee\n" +
                    "Grinding coffee beans\n" +
                    "Boiling water\n" +
                    "Mixing boiled water with crushed coffee beans\n" +
                    "Pouring coffee into the cup\n" +
                    "Pouring some milk into the cup\n" +
                    "Coffee is ready!");
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/178/implement
status: Solved
record: 4
